---
title: "ch13_logical_vecotrs"
format: html
editor: visual
---

## Ch13.

This chapter teaches you about logical vectors. These are the simplest types of vectors, but are extremely powerful. You'll learn how to create them with numeric comparisons, how to combine them with Boolean algebra, how to use them in summaries, and how to use them for condition transformations.

### Discussion prompts

-   What were the most useful functions leant that you can apply to your data analysis?

-   Is there any suprising functionality that you think you need to be mindful of?

-   Did the Chapters introduce any functionality that is new to you?

-   '==NA' does not work, use is.na() equals to '== NA'

-   use '%in%' instead of combining '==' and '\|' operators to avoid unwanted results

-   if_else() works like np.where() in python

-   case_when() to apply several different conditions

```{r}
library(tidyverse)
library(nycflights13)

x <- c(1, 2, 3, 5, 7, 11, 13)
x * 2

df <- tibble(x)
df |> 
  mutate(y = x * 2)


```

### 13.2 Comparisons

tibble =dataframe

```{r}

flights |> 
  filter(dep_time > 600 & dep_time < 2000 & abs(arr_delay) < 20)

flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
    .keep = "used"
  )

flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
  ) |> 
  filter(daytime & approx_ontime)

```

### 13.2.1 Floating point comparison

```{r}
x <- c(1 / 49 * 49, sqrt(2) ^ 2)
x

x == c(1, 2)

print(x, digits = 16)

near(x, c(1, 2))

```

#### 13.2.2 Missing values

```{r}
NA > 5

10 == NA

NA == NA

# We don't know how old Mary is
age_mary <- NA

# We don't know how old John is
age_john <- NA

# Are Mary and John the same age?
age_mary == age_john
#> [1] NA
# We don't know!
```

###find all flights where `dep_time` is missin

```{r}
is.na(c(TRUE, NA, FALSE))

flights |> 
  filter(is.na(dep_time))
```

[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) usually puts all the missing values at the end but you can override this default by first sorting by [`is.na()`](https://rdrr.io/r/base/NA.html)

```{r}
flights |> 
  filter(month == 1, day == 1) |> 
  arrange(desc(is.na(dep_time)), dep_time)

```

### 13.3 Bolean algebra

In R, `&` is "and", `|` is "or", `!` is "not", and [`xor()`](https://rdrr.io/r/base/Logic.html) is exclusive or^[2](https://r4ds.hadley.nz/logicals#fn2)^. For example, `df |> filter(!is.na(x))` finds all rows where `x` is not missing and `df |> filter(x < -10 | x > 0)` finds all rows where `x` is smaller than -10 or bigger than 0.

### 13.3.1 Missing values

```{r}
df <- tibble(x = c(TRUE, FALSE, NA))

df |> 
  mutate(
    and = x & NA,
    or = x | NA
  )

```

### **13.3.2 Order of operations**

```{r}
flights |> 
   filter(month == 11 | month == 12)

flights |> 
  mutate(
    nov = month == 11,
    final = nov | 12,
    .keep = "used"
  )
```

### 13.3.3 %in%

An easy way to avoid the problem of getting your `==`s and `|`s in the right order is to use `%in%`. `x %in% y` returns a logical vector the same length as `x` that is `TRUE` whenever a value in `x` is anywhere in `y` .

```{r}
1:12 %in% c(1, 5, 11)

letters[1:10]

#to find all flights in November and December we could write:
flights |> 
  filter(month %in% c(11, 12))

#
flights |> 
  filter(dep_time %in% c(NA, 0800))

```

#### Exercise 13.3.4

```{r}
#1.Find all flights where arr_delay is missing but dep_delay is not. 

flights |> 

  filter(is.na(arr_delay) & !is.na(dep_delay))

#2.How many flights have a missing dep_time? What other variables are missing in these rows? What might these rows represent?

flights |>

  filter(is.na(dep_time))  


```

### **13.4.1 Logical summaries**

There are two main logical summaries: [`any()`](https://rdrr.io/r/base/any.html) and [`all()`](https://rdrr.io/r/base/all.html). `any(x)` is the equivalent of `|`; it'll return `TRUE` if there are any `TRUE`'s in `x`.

We could use [`all()`](https://rdrr.io/r/base/all.html) and [`any()`](https://rdrr.io/r/base/any.html) to find out if every flight was delayed on departure by at most an hour or if any flights were delayed on arrival by five hours or more

```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(
    all_delayed = all(dep_delay <= 60, na.rm = TRUE),
    any_long_delay = any(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

### 

### **13.4.2 Numeric summaries of logical vectors**

see the proportion of flights that were delayed on departure by at most an hour and the number of flights that were delayed on arrival by five hours or more:

```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(
    all_delayed = mean(dep_delay <= 60, na.rm = TRUE),
    any_long_delay = sum(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

Look at the average delay just for flights that were actually delayed:

```{r}
flights |> 
  filter(arr_delay > 0) |> 
  group_by(year, month, day) |> 
  summarize(
    behind = mean(arr_delay),
    n = n(),
    .groups = "drop"
  )
#> # A tibble: 365 × 5
#>    year month   day behind     n
#>   <int> <int> <int>  <dbl> <int>
#> 1  2013     1     1   32.5   461
#> 2  2013     1     2   32.0   535
#> 3  2013     1     3   27.7   460
#> 4  2013     1     4   28.3   297
#> 5  2013     1     5   22.6   238
#> 6  2013     1     6   24.4   381
#> # ℹ 359 more rows
```

### 13.5 **Conditional transformations**

#### 13.5.1

```{r}
x <- c(-3:3, NA)
if_else(x > 0, "+ve", "-ve")

if_else(x > 0, "+ve", "-ve", "???")

#using vectors for the true or flase
if_else(x < 0, -x, x)
#> [1]  3  2  1  0  1  2  3 NA
```

### 13.5.2 case_when()

```{r}
x <- c(-3:3, NA)
case_when(
  x == 0   ~ "0",
  x < 0    ~ "-ve", 
  x > 0    ~ "+ve",
  is.na(x) ~ "???"
)

flights |> 
  mutate(
    status = case_when(
      is.na(arr_delay)      ~ "cancelled",
      arr_delay < -30       ~ "very early",
      arr_delay < -15       ~ "early",
      abs(arr_delay) <= 15  ~ "on time",
      arr_delay < 60        ~ "late",
      arr_delay < Inf       ~ "very late",
    ),
    .keep = "used"
  )
#> [1] "-ve" "-ve" "-ve" "0"   "+ve" "+ve" "+ve" "???"
```
