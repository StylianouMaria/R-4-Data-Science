---
title: "Dates and times"
format: html
editor: visual
---

## 18 Dates and times in R

How to create date-times from various inputs, and then once you've got a date-time, how you can extract components like year, month, and day

### **18.1.1 Prerequisites**

Package to make easier to work with dates and times in R.

```{r}
library(tidyverse)
library(nycflights13)
```

## **18.2 Creating date/times**

-   A **date**. Tibbles print this as `<date>`.

-   A **time** within a day. Tibbles print this as `<time>`.

-   A **date-time** is a date plus a time: it uniquely identifies an instant in time (typically to the nearest second). Tibbles print this as `<dttm>`. Base R calls these POSIXct, but doesn't exactly trip off the tongue.

To get the current date or date-time you can use [`today()`](https://lubridate.tidyverse.org/reference/now.html) or [`now()`](https://lubridate.tidyverse.org/reference/now.html):

```{r}
today()
now()
```

### **18.2.1 During import**

```{r}
csv <-"
    date,datetime
    2022-01-02,2022-01-02 05:12"

read_csv(csv)
```

#example of date-time formats

Note that no matter how you specify the date format, it's always displayed the same way once you get it into R.

```{r}
csv <- "
  date
  01/02/15
"

read_csv(csv, col_types = cols(date = col_date("%m/%d/%y")))

read_csv(csv, col_types = cols(date = col_date("%d/%m/%y")))

read_csv(csv, col_types = cols(date = col_date("%y/%m/%d")))



```

### **18.2.2 From strings**

Lubridate's helpers which attempt to automatically determine the format once you specify the order of the component.

```{r}
ymd("2017-01-31")

mdy("January 31st, 2017")

dmy("31-Jan-2017")

```

[`ymd()`](https://lubridate.tidyverse.org/reference/ymd.html) and friends create dates. To create a date-time, add an underscore and one or more of "h", "m", and "s" to the name of the parsing function:

```{r}
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
```

You can also force the creation of a date-time from a date by supplying a timezone:

```{r}
ymd("2017-01-31", tz = "UTC")
```

GMT, or Greenwich Mean Time, the time at 0Â° longitude.

### **18.2.3 From individual components**

```{r}
library(nycflights13)

nycflights13::flights |> 
  select(year, month, day, hour, minute)

#To create a date/time from this sort of input, use make_date() for dates, or make_datetime() for date-times:
nycflights13::flights |> 
  select(year, month, day, hour, minute) |> 
  mutate(departure = make_datetime(year, month, day, hour, minute))

```

```{r}
make_datetime_100 <- function(year, month, day, time) {
  make_datetime(year, month, day, time %/% 100, time %% 100)
}

flights <- flights |> 
  filter(!is.na(dep_time), !is.na(arr_time)) |> 
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
  ) |> 
  select(origin, dest, ends_with("delay"), ends_with("time"))

flights_dt

#we can visualize the distribution of departure times across the year:

flights_dt |> 
  ggplot(aes(x = dep_time)) + 
  geom_freqpoly(binwidth = 86400) # 86400 seconds = 1 day
```

```{r}
flights_dt |> 
  filter(dep_time < ymd(20130102)) |>
  ggplot(aes(x = dep_time)) +
  geom_freqpoly(binwidth = 600)
```

Note that when you use date-times in a numeric context (like in a histogram), 1 means 1 second, so a binwidth of 86400 means one day. For dates, 1 means 1 day.

### **18.2.4 From other types**

To switch between a date-time and a date.

```{r}
as_datetime(today())

as_date(now())
```

Sometimes you'll get date/times as numeric offsets from the "Unix Epoch", 1970-01-01. If the offset is in seconds, use [`as_datetime()`](https://lubridate.tidyverse.org/reference/as_date.html); if it's in days, use [`as_date()`](https://lubridate.tidyverse.org/reference/as_date.html).

```{r}
as_datetime(60 * 60 * 10)

as_date(365 * 10 + 2)
```

## **18.3 Date-time components**

Now that you know how to get date-time data into R's date-time data structures, let's explore what you can do with them.

### **18.3.1 Getting components**

You can pull out individual parts of the date with the accessor functions [`year()`](https://lubridate.tidyverse.org/reference/year.html), [`month()`](https://lubridate.tidyverse.org/reference/month.html), [`mday()`](https://lubridate.tidyverse.org/reference/day.html) (day of the month), [`yday()`](https://lubridate.tidyverse.org/reference/day.html) (day of the year), [`wday()`](https://lubridate.tidyverse.org/reference/day.html) (day of the week), [`hour()`](https://lubridate.tidyverse.org/reference/hour.html), [`minute()`](https://lubridate.tidyverse.org/reference/minute.html), and [`second()`](https://lubridate.tidyverse.org/reference/second.html). These are effectively the opposites of [`make_datetime()`](https://lubridate.tidyverse.org/reference/make_datetime.html).

```{r}
datetime <- ymd_hms("2026-07-08 12:34:56")

year(datetime)

month(datetime)

mday(datetime)

yday(datetime)

wday(datetime)
```

For [`month()`](https://lubridate.tidyverse.org/reference/month.html) and [`wday()`](https://lubridate.tidyverse.org/reference/day.html) you can set `label = TRUE` to return the abbreviated name of the month or day of the week.

```{r}
month(datetime, label = TRUE)

wday(datetime, label = TRUE, abbr = FALSE)

flights_dt |> 
  mutate(wday = wday(dep_time, label = TRUE)) |> 
  ggplot(aes(x = wday)) +
  geom_bar()
```

Get the average departure delay by minut within the hour.

```{r}
flights_dt |> 
  mutate(minute = minute(dep_time)) |> 
  group_by(minute) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE),
    n = n()
  ) |> 
  ggplot(aes(x = minute, y = avg_delay)) +
  geom_line()


sched_dep <- flights_dt |> 
  mutate(minute = minute(sched_dep_time)) |> 
  group_by(minute) |> 
  summarize(
    avg_delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

ggplot(sched_dep, aes(x = minute, y = avg_delay)) +
  geom_line()
```

### **18.3.2 Rounding**

Each function takes a vector of dates to adjust and then the name of the unit to round down (floor), round up (ceiling), or round to.

```{r}
flights_dt |> 
  count(week = floor_date(dep_time, "week")) |> 
  ggplot(aes(x = week, y = n)) +
  geom_line() + 
  geom_point()

#You can use rounding to show the distribution of flights across the course of a day by computing the difference between dep_time and the earliest instant of that day:

flights_dt |> 
  mutate(dep_hour = dep_time - floor_date(dep_time, "day")) |> 
  ggplot(aes(x = dep_hour)) +
  geom_freqpoly(binwidth = 60 * 30)

flights_dt |> 
  mutate(dep_hour = hms::as_hms(dep_time - floor_date(dep_time, "day"))) |> 
  ggplot(aes(x = dep_hour)) +
  geom_freqpoly(binwidth = 60 * 30)
```

### **18.3.3 Modifying components**

You can also use each accessor function to modify the components of a date/time.

```{r}
(datetime <- ymd_hms("2026-07-08 12:34:56"))

year(datetime) <- 2030
datetime

month(datetime) <- 01
datetime

hour(datetime) <- hour(datetime) + 1
datetime

update(datetime, year = 2030, month = 2, mday = 2, hour = 2)

#roll-over
update(ymd("2023-02-01"), mday = 30)
update(ymd("2023-02-01"), hour = 400)
```

##### 18.3.4

Exercise 1

```{r}
make_datetime_100 <- function(year, month, day, time) {
  make_datetime(year, month, day, time %/% 100, time %% 100)
}

p <- c(0.05, .25,.5,.75, 0.95)
out <- flights |>
  filter(!is.na(dep_time), !is.na(arr_time)) |>
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    flight_length = arr_time - dep_time,
    date = date(dep_time)
  ) |>
  group_by(date) |>
  reframe(stats = quantile(flight_length, probs = p),
            n = length(flight_length),
            p = ordered(p)) |>
  filter(stats > -100) |>
  ggplot( aes(x = date, stats, color = p)) +
  geom_point()
```

Exercise 5

1.  On what day of the week should you leave if you want to minimise the chance of a delay?

```{r}
make_datetime_100 <- function(year, month, day, time) 

flights_dt <- flights |> 
  filter(!is.na(dep_time), !is.na(arr_time)) |> 
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
  ) |> 
  select(day, dest, ends_with("delay"), ends_with("time"))

flights_dt
```

Solution

```{r}
flights |> 
  mutate(
    date = make_date(year, month, day),
    weekday = wday(date, label = TRUE),
    arr_delay = pmax(arr_delay, 0)
  ) |> 
  summarise(
    .by = weekday,
    mean_delay = mean(arr_delay, na.rm = TRUE),
    prop_delayed = mean(arr_delay > 0, na.rm = TRUE)
  ) |> arrange(mean_delay)

```

##### 18.4.4

Exercise 2

Create a vector of dates giving the first day of every month in 2015. Create a vector of dates giving the first day of every month in the *current* year.

```{r}
#datetime <- ymd_hms("2015-01-01 01:00:0")
#day1<-mday(datetime)

#yrm<-month(datetime, label=TRUE)


orig <- "2015-01-01"
d <- data.frame(date=seq(as.Date(orig), length=1000, by='1 day'))
d$Month <- months(d$date)
d$DayWeek <- weekdays(d$date)
d$DayMonth <- as.numeric(format(d$date, '%d'))

d

###Solution
date("2015-1-1") + month(1)*seq(0, 11)
today() - yday( now() )+1+month(1)*seq(0, 11)
```

1.  Why can't `(today() %--% (today() + years(1))) / months(1)` work?

```{r}
(today() %--% (today() + years(1))) / months(1) 
```

You cannot divide an Interval object by a Period of one month ("/ months(1)") because periods and intervals have different properties. Periods represents a span of time without considering lengths of months.

```{r}
make_date(2015, 1:12, 1)
make_date(year(today()), 1:12, 1)

```

## **18.4 Time spans**

Along the way, you'll learn about three important classes that represent time spans:

-   **Durations**, which represent an exact number of seconds.

-   **Periods**, which represent human units like weeks and months.

-   **Intervals**, which represent a starting and ending point.

As always, pick the simplest data structure that solves your problem. If you only care about physical time, use a duration; if you need to add human times, use a period; if you need to figure out how long a span is in human units, use an interval.

### **18.4.1 Durations**

```{r}

# How old is Hadley?
h_age <- today() - ymd("1979-10-14")
h_age

as.duration(h_age)
```

A `difftime` class object records a time span of seconds, minutes, hours, days, or weeks.

Durations come with a bunch of convenient constructors:

```{r}
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
dweeks(3)
dyears(1)
```

```{r}
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)

#You can add and subtract durations to and from days:
tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)

one_am <- ymd_hms("2026-03-08 01:00:00", tz = "America/New_York")

one_am

one_am + ddays(1)

```

### **18.4.2 Periods**

Periods are time spans but don't have a fixed length in seconds, instead they work with "human" times, like days and months.

```{r}
one_am

one_am + days(1)

hours(c(12, 24))

days(7)

months(1:6)

#You can add and multiply periods:
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)

#And of course, add them to dates.
# A leap year
ymd("2024-01-01") + dyears(1)

ymd("2024-01-01") + years(1)

# Daylight saving time
one_am + ddays(1)
one_am + days(1)

#Letâs use periods to fix an oddity related to our flight dates
flights_dt |> 
  filter(arr_time < dep_time)
```

```{r}
flights_dt <- flights_dt |> 
  mutate(
    overnight = arr_time < dep_time,
    arr_time = arr_time + days(overnight),
    sched_arr_time = sched_arr_time + days(overnight)
  )

flights_dt |> 
  filter(arr_time < dep_time)
```

### **18.4.3 Intervals**

#check what it returns from leap years

```{r}
years(1) / days(1)

#An interval is a pair of starting and ending date times, or you can think of it as a duration with a starting point.
y2023 <- ymd("2023-01-01") %--% ymd("2024-01-01")
y2024 <- ymd("2024-01-01") %--% ymd("2025-01-01")

y2023
y2024

y2023 / days(1)
y2024 / days(1)

```

## **18.5 Time zones**

The first challenge is that everyday names of time zones tend to be ambiguous. For example, if you're American you're probably familiar with EST, or Eastern Standard Time. However, both Australia and Canada also have EST! To avoid confusion, R uses the international standard IANA time zones.

```{r}
Sys.timezone()
length(OlsonNames())
head(OlsonNames())
```

In R, the time zone is an attribute of the date-time that only controls printing.

```{r}
x1 <- ymd_hms("2024-06-01 12:00:00", tz = "America/New_York")
x1

x2 <- ymd_hms("2024-06-01 18:00:00", tz = "Europe/Copenhagen")
x2

x3 <- ymd_hms("2024-06-02 04:00:00", tz = "Pacific/Auckland")
x3

x1 - x2

x1 - x3

```

UTC (Coordinated Universal Time) is the standard time zone used by the scientific community and is roughly equivalent to GMT (Greenwich Mean Time).

```{r}
x4 <- c(x1, x2, x3)
x4

x4a <- with_tz(x4, tzone = "Australia/Lord_Howe")
x4a

x4a - x4

x4b <- force_tz(x4, tzone = "Australia/Lord_Howe")
x4b
```

### 18.6 Summary

This chapter has introduced you to the tools that lubridate provides to help you work with date-time dat
