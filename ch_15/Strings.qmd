---
title: "ch_15_Strings"
format: html
editor: visual
---

## **15.1 Introduction**

### **15.1.1 Prerequisites**

Using functions from the stringgr package:

```{r}
library(tidyverse)
library(babynames)
```

**15.2 Creating a string**

create a string using either single quotes (`'`) or double quotes (`"`):

```{r}
string1 <- "This is a string"
string2 <- 'If I want to include a "quote" inside a string, I use single quotes'
```

`+`, the continuation prompt.

```{r}
#| echo: false
2 * 2
```

#### **15.2.1 Escapes**

To include a literal single or double quote in a string, you can use `\` to "escape" it:

```{r}
double_quote <- "\"" # or '"'
single_quote <- '\'' # or "'"
```

So if you want to include a literal backslash in your string, you'll need to escape it: `"\\"`:

```{r}
backslash <- "\\"
```

To see the raw contents of the string, use [`str_view()`](https://stringr.tidyverse.org/reference/str_view.html)^[1](https://r4ds.hadley.nz/strings#fn1)^:

```{r}
x <- c(single_quote, double_quote, backslash)
x

str_view(x)
```

### **15.2.2 Raw strings**

Creating a string with multiple quotes or backslashes gets confusing quickly. let's create a string that contains the contents of the code block where we define the `double_quote` and `single_quote` variables:

```{r}
tricky <- "double_quote <- \"\\\"\" # or '\"'
single_quote <- '\\'' # or \"'\""
str_view(tricky)
```

```{r}
tricky <- r"(double_quote <- "\"" # or '"'
single_quote <- '\'' # or "'")"
str_view(tricky)
```

A raw string usually starts with `r"(` and finishes with `)"`. But if your string contains `)"` you can instead use `r"[]"` or `r"{}"`, and if that's still not enough, you can insert any number of dashes to make the opening and closing pairs unique, e.g., `` `r"--()--" ``, `` `r"---()---" ``, etc. Raw strings are flexible enough to handle any text.

### **15.2.3 Other special characters**

The most common are `\n`, a new line, and `\t`, tab. ou'll also sometimes see strings containing Unicode escapes that start with `\u` or `\U`, see ?Quotes.

```{r}
x <- c("one\ntwo", "one\ttwo", "\u00b5", "\U0001f604")
x

str_view(x)
```

## **15.3 Creating many strings from data**

For example, you might combine "Hello" with a `name` variable to create a greeting. We'll show you how to do this with [`str_c()`](https://stringr.tidyverse.org/reference/str_c.html) and [`str_glue()`](https://stringr.tidyverse.org/reference/str_glue.html) and how you can use them with [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html).

[`str_c()`](https://stringr.tidyverse.org/reference/str_c.html) takes any number of vectors as arguments and returns a character vector:

```{r}
str_c("x", "y")

str_c("x", "y", "z")
str_c("Hello ", c("John", "Susan"))

df <- tibble(name = c("Flora", "David", "Terra", NA))
df |> mutate(greeting = str_c("Hi ", name, "!"))
```

If you want missing values to display in another way, use [`coalesce()`](https://dplyr.tidyverse.org/reference/coalesce.html) to replace them. Depending on what you want, you might use it either inside or outside of [`str_c()`](https://stringr.tidyverse.org/reference/str_c.html):

```{r}
df |> 
  mutate(
    greeting1 = str_c("Hi ", coalesce(name, "you"), "!"),
    greeting2 = coalesce(str_c("Hi ", name, "!"), "Hi!")
  )
```

### **15.3.2 `str_glue()`**

[glue package](https://glue.tidyverse.org/) via [`str_glue()`](https://stringr.tidyverse.org/reference/str_glue.html)^[3](https://r4ds.hadley.nz/strings#fn3)^. You give it a single string that has a special feature: anything inside [`{}`](https://rdrr.io/r/base/Paren.html) will be evaluated like it's outside of the quotes:

```{r}
df |> mutate(greeting = str_glue("Hi {name}!"))
```

You also might wonder what happens if you need to include a regular `{` or `}` in your string. You're on the right track if you guess you'll need to escape it somehow.

```{r}
df |> mutate(greeting = str_glue("{{Hi {name}!}}"))
```

### **15.3.3 `str_flatten()`**

[`str_c()`](https://stringr.tidyverse.org/reference/str_c.html) and [`str_glue()`](https://stringr.tidyverse.org/reference/str_glue.html) work well with [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) because their output is the same length as their inputs. What if you want a function that works well with [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html), i.e.Â something that always returns a single string? That's the job of [`str_flatten()`](https://stringr.tidyverse.org/reference/str_flatten.html)^[4](https://r4ds.hadley.nz/strings#fn4)^: it takes a character vector and combines each element of the vector into a single string:

```{r}
str_flatten(c("x", "y", "z"))

str_flatten(c("x", "y", "z"), ", ")

str_flatten(c("x", "y", "z"), ", ", last = ", and ")

df <- tribble(
  ~ name, ~ fruit,
  "Carmen", "banana",
  "Carmen", "apple",
  "Marvin", "nectarine",
  "Terence", "cantaloupe",
  "Terence", "papaya",
  "Terence", "mandarin"
)
df |>
  group_by(name) |> 
  summarize(fruits = str_flatten(fruit, ", "))
```

## **15.4 Extracting data from strings**

In this section, you'll learn how to use four tidyr functions to extract them:

-   `df |> separate_longer_delim(col, delim)`

-   `df |> separate_longer_position(col, width)`

-   `df |> separate_wider_delim(col, delim, names)`

-   `df |> separate_wider_position(col, widths)`

<!-- -->

-   Just like with [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) and [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html), `_longer` functions make the input data frame longer by creating new rows and `_wider` functions make the input data frame wider by generating new columns.

-   `delim` splits up a string with a delimiter like `", "` or `" "`; `position` splits at specified widths, like `c(3, 5, 2)`.

### 15.3.4

#### Exercise 3

NOTE:

```{r}
all.equal(str_c("foo"), str_glue("foo"))
```

1.  Convert the following expressions from [`str_c()`](https://stringr.tidyverse.org/reference/str_c.html) to [`str_glue()`](https://stringr.tidyverse.org/reference/str_glue.html) or vice versa:

    a.  `str_c("The price of ", food, " is ", price)`

    b.  `str_glue("I'm {age} years old and live in {country}")`

    c.  `str_c("\\section{", title, "}")`

```{r}
df <- tibble(food=c("seafood", "chicken", "fries"), price=c("18", "15", "6")) 
df
df |> mutate(Result=str_glue("The price of {food} is {price}"))

df<- tibble(age= c("24","27", "30"), country=c("Cyprus", "UK", "Spain")) 
df |> mutate(Results = str_c("I'm", age, "years old and live in", country)) 

df |> mutate(Results = str_glue("\\section{{} {title} }"))

```

Notes: Name tokens are not well documented, they seem to work for `{code}str_match`, and the underlying stringi::stri_replace but not for str_replace!

Solution

```{r}
#a
food <- "cake"
price <-"obesity"
str_glue("The price of {food} is {price}")

#b
#str_glue("I'm {age} years old and live in {country}")

#c
str_c("\\section{", title, "}")

```

### **15.4.1 Separating into rows**

Separating a string into rows tends to be most useful when the number of components varies from row to row.

```{r}
df1 <- tibble(x = c("a,b,c", "d,e", "f"))
df1 |> 
  separate_longer_delim(x, delim = ",")

df2 <- tibble(x = c("1211", "131", "21"))
df2 |> 
  separate_longer_position(x, width = 1)
```

### **15.4.2 Separating into columns**

Separating a string into columns tends to be most useful when there are a fixed number of components in each string, and you want to spread them into columns. They are slightly more complicated than their `longer` equivalents because you need to name the columns.

```{r}
df3 <- tibble(x = c("a10.1.2022", "b10.2.2011", "e15.1.2015"))
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", "edition", "year")
  )
```

If a specific piece is not useful you can use an `NA` name to omit it from the results:

```{r}
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", NA, "year")
  )
```

You can omit values from the output by not naming them:

```{r}
df4 <- tibble(x = c("202215TX", "202122LA", "202325CA")) 
df4 |> 
  separate_wider_position(
    x,
    widths = c(year = 4, age = 2, state = 2)
  )
```

### **5.4.3 Diagnosing widening problems**

[`separate_wider_delim()`](https://tidyr.tidyverse.org/reference/separate_wider_delim.html)^[5](https://r4ds.hadley.nz/strings#fn5)^ requires a fixed and known set of columns. What happens if some of the rows don't have the expected number of pieces?

```{r}
df <- tibble(x = c("1-1-1", "1-1-2", "1-3", "1-3-2", "1"))
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z")
  )
```

Let's start by debugging the problem:

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "debug"
  )

debug
```

Here, `x_ok` lets you quickly find the inputs that failed:

```         
```

```{r}
debug |> filter(!x_ok)
```

you may want to fill in the missing pieces with `NA`s and move on. That's the job of `too_few = "align_start"` and `too_few = "align_end"` which allow you to control where the `NA`s should go:

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "align_start"
  )
```

```{r}
df <- tibble(x = c("1-1-1", "1-1-2", "1-3-5-6", "1-3-2", "1-3-5-7-9"))

df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z")
  )
```

when we debug the result, you can see the purpose of `x_remainder`:

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "debug"
  )
debug |> filter(!x_ok)
```

You have a slightly different set of options for handling too many pieces: you can either silently "drop" any additional pieces or "merge" them all into the final column:

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "drop"
  )

df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "merge"
  )
```

## **15.5 Letters**

[`str_length()`](https://stringr.tidyverse.org/reference/str_length.html) tells you the number of letters in the string:

```{r}
str_length(c("a", "R for data science", NA))
```

You could use this with [`count()`](https://dplyr.tidyverse.org/reference/count.html) to find the distribution of lengths of US babynames and then with [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) to look at the longest names, which happen to have 15 letters^[6](https://r4ds.hadley.nz/strings#fn6)^:

```{r}
babynames |> 
  count(length = str_length(name), wt = n)

babynames |> 
  filter(str_length(name) == 15) |> 
  count(name, wt = n, sort = TRUE)
```

### **15.5.2 Subsetting**

You can extract parts of a string using `str_sub(string, start, end)`, where `start` and `end` are the positions where the substring should start and end.

```{r}
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
```

**You can use negative values to count back from the end of the string: -1 is the last character, -2 is the second to last character, etc.**

```{r}
str_sub(x, -3, -1)

#Note that str_sub() wonât fail if the string is too short: it will just return as much as possible:
str_sub("a", 1, 5)

#We could use str_sub() with mutate() to find the first and last letter of each name:
babynames |> 
  mutate(
    first = str_sub(name, 1, 1),
    last = str_sub(name, -1, -1)
  )
```

### 15.5.3

#### Exercise 3

Are there any major trends in the length of babynames over time? What about the popularity of first and last letters? As shown, an increasing trend

```{r}
babynames 
#1,924,665 rows 
# Check the structure of your dataset 
str(babynames) 
# Create a new data frame with the length of each name 
name_lengths <- babynames  |>   
  mutate(name_length =  str_length(name))
name_lengths 

# Calculate the average name length by year 
average_length_by_year <- name_lengths |> 
       group_by(year) |>  
       summarise(avg_name_length = mean(name_lengths),n) 
average_length_by_year 

# Plot the trend of average name length over time
ggplot(average_length_by_year, aes(x = year, y = avg_name_length)) +   
       geom_line() +   
       labs(title = "Average Name Length Over Time", 
            x = "Year", y = "Average Name Length")
```

```{r}
babynames |>
  group_by(year) |>
  summarize(n_letters = weighted.mean(str_length(name),n)) |> 
  ggplot(aes(y = n_letters, x = year)) + geom_point()


#Martin

dat <- babynames |>  
  mutate(len = str_length(name)) |>  
  group_by(len,year) |>   
  summarise(n = sum(n),            
  prop = sum(prop),            
  .groups = "drop")

plt <- dat |>
   ggplot(aes(x = year, y = prop, color = len)) +
     geom_line(linewidth = 1) + 
     guides(color = "none")
plt + facet_wrap(~len)
plt + facet_wrap(~len, scales = "free")



###
for (idx in c(1, -1)) {
  dat <- babynames |> 
    mutate(letter = str_sub(name, idx, idx)) |> 
    group_by(letter, year) |> 
    summarise(n = sum(n),
              prop = sum(prop),
              .groups = "drop")
  
  plt <- dat |> 
    ggplot(aes(x = year, y = prop, color = letter)) +
    geom_line(linewidth = 1) +
    guides(color = "none")
  
  show(plt + facet_wrap(~letter))
  show(plt + facet_wrap(~letter, scales = "free"))
}


###Others
babynames <- babynames |> mutate(name_length = nchar(name))
avg_length_by_year <- babynames |>
  group_by(year) |>
  summarize(avg_length = mean(name_length))
ggplot(avg_length_by_year, aes(x = year, y = avg_length)) +
  geom_line() +
  ggtitle("Average Length of Baby Names Over Time")

for (idx in c(1, -1)) {
  dat <- babynames |> 
    mutate(letter = str_sub(name, idx, idx)) |> 
    group_by(letter, year) |> 
    summarise(n = sum(n),
              prop = sum(prop),
              .groups = "drop")
  
  plt <- dat |> 
    ggplot(aes(x = year, y = prop, color = letter)) +
    geom_line(linewidth = 1) +
    guides(color = "none")
  
  show(plt + facet_wrap(~letter))
  show(plt + facet_wrap(~letter, scales = "free"))
  }

name_lengths <- name_lengths|>
  mutate(
    first_letter = str_sub(name, 1, 1),
    last_letter = str_sub(name, -1, -1))

first_letter_pop <- name_lengths |>
  group_by(year, first_letter) |>
  summarise(count = n()) |>
   arrange(desc(count))
```

## **15.6 Non-English text**

So far, we've focused on English language text which is particularly easy to work with for two reasons. Firstly, the English alphabet is relatively simple: there are just 26 letters. Secondly (and maybe more importantly), the computing infrastructure we use today was predominantly designed by English speakers.

### **15.6.1 Encoding**

When working with non-English text, the first challenge is often the **encoding**.

```{r}
charToRaw("Hadley")
```

Each of these six hexadecimal numbers represents one letter: `48` is H, `61` is a, and so on. The mapping from hexadecimal number to character is called the encoding, and in this case, the encoding is called ASCII. ASCII does a great job of representing English characters because it's the **American** Standard Code for Information Interchange.For example, there were two different encodings for Europe: Latin1 (aka ISO-8859-1) was used for Western European languages, and Latin2 (aka ISO-8859-2) was used for Central European languages. In Latin1, the byte `b1` is "Â±", but in Latin2, it's "Ä"! Fortunately, today there is one standard that is supported almost everywhere: UTF-8. UTF-8 can encode just about every character used by humans today and many extra symbols like emojis.

readr uses UTF-8 everywhere.

```{r}
x1 <- "text\nEl Ni\xf1o was particularly bad this year"
read_csv(x1)$text

x2 <- "text\n\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
read_csv(x2)$text


```

```{r}
#To read these correctly, you specify the encoding via the locale argument:
read_csv(x1, locale = locale(encoding = "Latin1"))$text
read_csv(x2, locale = locale(encoding = "Shift-JIS"))$text

```

### **15.6.2 Letter variations**

Working in languages with accents poses a significant challenge when determining the position of letters (e.g., with [`str_length()`](https://stringr.tidyverse.org/reference/str_length.html) and [`str_sub()`](https://stringr.tidyverse.org/reference/str_sub.html)) as accented letters might be encoded as a single individual character (e.g., Ã¼) or as two characters by combining an unaccented letter (e.g., u) with a diacritic mark (e.g., Â¨)

```{r}
u <- c("\u00fc", "u\u0308")
str_view(u)

#both strings differ in length
str_length(u)
str_sub(u, 1, 1)

#when compared, are interpreted as different
u[[1]] == u[[2]]

str_equal(u[[1]], u[[2]])
```

### **15.6.3 Locale-dependent functions**

A locale is similar to a language but includes an optional region specifier to handle regional variations within a language. A locale is specified by a lower-case language abbreviation, optionally followed by a `_` and an upper-case region identifier. For example, "en" is English, "en_GB" is British English, and "en_US" is American English.

```{r}
str_to_upper(c("i", "Ä±"))

str_to_upper(c("i", "Ä±"), locale = "tr")

#sorting strings depends on the order of the alphabet
str_sort(c("a", "c", "ch", "h", "z"))

str_sort(c("a", "c", "ch", "h", "z"), locale = "cs")
```

sorting comes up when sorting strings with [`dplyr::arrange()`](https://dplyr.tidyverse.org/reference/arrange.html), which is why it also has a `locale` argument.

## **15.7 Summary**

In this chapter, you've learned about some of the power of the stringr package: how to create, combine, and extract strings, and about some of the challenges you might face with non-English strings.
